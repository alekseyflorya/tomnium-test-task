{"version":3,"sources":["API.js","App.js","serviceWorker.js","index.js"],"names":["getData","appId","fetch","then","response","json","catch","console","error","App","useState","base","rates","timestamp","valid","appID","state","setState","useEffect","data","className","Date","toLocaleString","type","value","onChange","e","target","placeholder","onClick","Object","entries","map","key","toFixed","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"2MAOeA,MAPf,SAAiBC,GAIf,OAHaC,MAAMD,EAAK,+DAA2DA,GAAU,mBAC1FE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BC,OAAM,kBAAMC,QAAQC,MAAM,mB,MC6DhBC,MA5Df,WAAgB,IAAD,EACaC,mBAAS,CACjCC,KAAM,GACNC,MAAO,GACPC,UAAW,GACXC,OAAO,EACPC,MAAO,KANI,mBACNC,EADM,KACCC,EADD,KAQNN,EAAwCK,EAAxCL,KAAMC,EAAkCI,EAAlCJ,MAAOC,EAA2BG,EAA3BH,UAAWC,EAAgBE,EAAhBF,MAAOC,EAASC,EAATD,MA6BtC,OA3BAG,qBAAU,WACRlB,IAAUG,MAAK,SAAAgB,GACbF,GAAS,SAAAD,GAAK,sBACTA,EADS,CAEZL,KAAMQ,EAAKR,KACXC,MAAOO,EAAKP,MACZC,UAAWM,EAAKN,UAChBC,MAAOK,EAAKL,gBAGhB,IAkBA,yBAAKM,UAAU,aACb,wBAAIA,UAAU,SAAd,kBAAsCT,GACtC,uBAAGS,UAAU,QAAb,cAAgC,IAAIC,KAAe,IAAVR,GAAgBS,kBACzD,2BAAIR,EAAQ,wBAA0B,iCACtC,uBAAGM,UAAU,aAAb,gJACA,yBAAKA,UAAU,eACb,2BAAOG,KAAK,OAAOC,MAAOT,EAAOU,SAtBlB,SAACC,GACpBT,EAAS,eAAID,EAAL,CAAYD,MAAOW,EAAEC,OAAOH,UAqByBJ,UAAU,QAAQQ,YAAY,iBACvF,4BAAQC,QAnBM,WAClB7B,EAAQe,GAAOZ,MAAK,SAAAgB,GAClBF,GAAS,SAAAD,GAAK,sBACTA,EADS,CAEZL,KAAMQ,EAAKR,KACXC,MAAOO,EAAKP,MACZC,UAAWM,EAAKN,UAChBC,OAAO,WAYuBM,UAAU,UAAxC,SAEF,yBAAKA,UAAU,QACZU,OAAOC,QAAQnB,GAAOoB,KAAI,YAAmB,IAAD,mBAAhBC,EAAgB,KAAXT,EAAW,KAC3C,OACE,yBAAKJ,UAAU,YAAYa,IAAKA,GAC9B,0BAAMb,UAAU,YAAYa,EAA5B,MADF,IAC4C,0BAAMb,UAAU,cAAcI,EAAMU,QAAQ,WC3ChFC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEd3C,OAAM,SAAAE,GACLD,QAAQC,MAAMA,EAAM0C,a","file":"static/js/main.86bc8263.chunk.js","sourcesContent":["function getData(appId) {\r\n  const data = fetch(appId ? `https://openexchangerates.org/api/latest.json?app_id=${appId}` : '/data/data.json')\r\n    .then(response => response.json())\r\n    .catch(() => console.error(\"Fetch error\"));\r\n  return data;\r\n}\r\n\r\nexport default getData;","import React, {useState, useEffect} from 'react';\nimport getData from \"./API\";\nimport './App.scss';\n\nfunction App() {\n  const [state, setState] = useState({\n    base: '',\n    rates: [],\n    timestamp: '',\n    valid: true,\n    appID: ''\n  });\n  const {base, rates, timestamp, valid, appID} = state;\n\n  useEffect(() => {\n    getData().then(data => {\n      setState(state => ({\n        ...state,\n        base: data.base,\n        rates: data.rates,\n        timestamp: data.timestamp,\n        valid: data.valid\n      }));\n    });\n  },[]);\n\n  const handleChange = (e) => {\n    setState({...state, appID: e.target.value});\n  }\n\n  const handleClick = () => {\n    getData(appID).then(data => {\n      setState(state => ({\n        ...state,\n        base: data.base,\n        rates: data.rates,\n        timestamp: data.timestamp,\n        valid: false\n      }));\n    });\n  }\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">Base currency: {base}</h1>\n      <p className=\"date\">Timestamp: {new Date(timestamp*1000).toLocaleString()}</p>\n      <p>{valid ? ' Data from local file' : 'Data from Open Exchange Rates'}</p>\n      <p className=\"info-text\">This is local data from test file. If you want to get data from Open Exchange Rates enter your App ID to input field and press button 'LOAD'</p>\n      <div className=\"input-block\">\n        <input type=\"text\" value={appID} onChange={handleChange} className=\"input\" placeholder=\"Input App ID\"/>\n        <button onClick={handleClick} className=\"button\">LOAD</button>\n      </div>\n      <div className=\"list\">\n        {Object.entries(rates).map(([key, value]) => {\n          return (\n            <div className=\"list-item\" key={key}>\n              <span className=\"list-key\">{key}: </span> <span className=\"list-value\">{value.toFixed(3)}</span>\n            </div>\n          )\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}